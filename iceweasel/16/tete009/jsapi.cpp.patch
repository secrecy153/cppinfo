diff -r 6a3897dad583 js/src/jsapi.cpp
--- a/js/src/jsapi.cpp	Sat Oct 06 15:30:41 2012 +0900
+++ b/js/src/jsapi.cpp	Sat Oct 06 16:26:12 2012 +0900
@@ -2022,17 +2022,17 @@ JS_EnumerateStandardClasses(JSContext *c
     RootedObject obj(cx, obj_);
 
     /*
      * Check whether we need to bind 'undefined' and define it if so.
      * Since ES5 15.1.1.3 undefined can't be deleted.
      */
     RootedPropertyName undefinedName(cx, cx->runtime->atomState.typeAtoms[JSTYPE_VOID]);
     RootedId undefinedId(cx, NameToId(undefinedName));
-    if (!obj->nativeContains(cx, undefinedId) &&
+    if (!obj->nativeContains(cx, (HandleId)undefinedId) &&
         !obj->defineProperty(cx, undefinedName, UndefinedValue(),
                              JS_PropertyStub, JS_StrictPropertyStub,
                              JSPROP_PERMANENT | JSPROP_READONLY)) {
         return false;
     }
 
     /* Initialize any classes that have not been initialized yet. */
     for (unsigned i = 0; standard_class_atoms[i].init; i++) {
@@ -2101,17 +2101,17 @@ AddNameToArray(JSContext *cx, PropertyNa
     return ida;
 }
 
 static JSIdArray *
 EnumerateIfResolved(JSContext *cx, JSObject *obj, PropertyName *name, JSIdArray *ida,
                     int *ip, JSBool *foundp)
 {
     RootedId id(cx, NameToId(name));
-    *foundp = obj->nativeContains(cx, id);
+    *foundp = obj->nativeContains(cx, (HandleId)id);
     if (*foundp)
         ida = AddNameToArray(cx, name, ida, ip);
     return ida;
 }
 
 JS_PUBLIC_API(JSIdArray *)
 JS_EnumerateResolvedStandardClasses(JSContext *cx, JSObject *obj, JSIdArray *ida)
 {
@@ -3687,17 +3687,17 @@ JS_AlreadyHasOwnPropertyById(JSContext *
         if (!LookupPropertyById(cx, obj, id, JSRESOLVE_QUALIFIED | JSRESOLVE_DETECTING,
                                 &obj2, &prop)) {
             return JS_FALSE;
         }
         *foundp = (obj == obj2);
         return JS_TRUE;
     }
 
-    *foundp = obj->nativeContains(cx, id);
+    *foundp = obj->nativeContains(cx, (HandleId)id);
     return JS_TRUE;
 }
 
 JS_PUBLIC_API(JSBool)
 JS_AlreadyHasOwnElement(JSContext *cx, JSObject *obj, uint32_t index, JSBool *foundp)
 {
     AssertHeapIsIdle(cx);
     CHECK_REQUEST(cx);
